// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/Bit.hdl

/**
 * 1-bit register:
 * If load[t] == 1 then out[t+1] = in[t]
 *                 else out does not change (out[t+1] = out[t])
 */

CHIP Bit {
    IN in, load;
    OUT out;

    PARTS:
    // Put your code here:
    //this is wrong
    //DFF(in = in,out = newIN);
    //Mux(a = out,b = newIN,sel = load,out = out);
    
    Mux(a = preOut, b = in, sel = load, out = o1);
    DFF(in = o1, out = preOut, out = out);
}


/**
 * 16-bit register:
 * If load[t] == 1 then out[t+1] = in[t]
 * else out does not change
 */

CHIP Register {
    IN in[16], load;
    OUT out[16];

    PARTS:
    Bit(in = in[0],load = load,out = out[0]);
    //...


}

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    //下面这个是错误的，因为改变了没有被选择的寄存器中的原有值
    //假设load=1，则所有的寄存器存储值都会被in replace
    DMux8Way(in =in,sel = address,a = outa,b=outb,c=outc,d=outd,e=oute,f=outf,g=outg,h=outh);

    Register(in = outa,load = load,out = out1);
    Register(in = outb,load = load,out = out2);
    Register(in = outc,load = load,out = out3);
    Register(in = outd,load = load,out = out4);
    Register(in = oute,load = load,out = out5);
    Register(in = outf,load = load,out = out6);
    Register(in = outg,load = load,out = out7);
    Register(in = outh,load = load,out = out8);

    Mux8Way16(a = out1,b = out2,c = out3,d = out4,
               e = out5,f = out6,g = out7,h = out8,
               sel = address,out = out);

}

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // Put your code here:
    Register(in=in,load = load,out = preOut1);
    Inc16(in = preOut1,out = incOut);
    Mux16(a = preOut1,b = incOut,sel = inc,out = preOut);
    Mux16(a=preOut,b=false,sel = reset,out = out);

    Mux4Way16(a = preOut1,b = incOut,c=false,d=false,sel[0]= inc,sel[1] = reset,out = out);

}