// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
  
   Not16(in = x,out = notx);
   //这里让d为true,当zx=1,nx=1,时，仍然能顺利输出-1，因为d=true，即为d=11111...111,正是-1的补码
   Mux4Way16(a = x,b = false,c = notx,d = true,sel[0] = zx,sel[1] = nx,out = xout);

   Not16(in = y,out = noty);
   Mux4Way16(a = y,b = false,c = noty,d = true,sel[0] = zy,sel[1] = ny,out = yout);

   And16(a = xout,b = yout,out = xAy);
   Add16(a = xout,b = yout,out = xAddy);
   Mux16(a = xAy,b = xAddy,sel = f,out = out1);
   Not16(in = out1,out = notout);
   Mux16(a = out1,b = notout,sel = no,out = out,out[15] = ng,out[0..7] = outlow,out[8..15] = outhigh);

   //判断是否为0

   Or8Way(in = outlow,out = o1);
   Or8Way(in = outhigh,out = o2);
   Or(a = o1,b = o2,out = notzr);
   Not(in = notzr,out = zr);
   

 /**
    //处理x,y的输入

    //x,y的按位相反,x,y置零无须实现,
    
    Mux16(a=x,b=false,sel = zx,out = isZX);
    Not16(in=isZX,out= notX);
    Mux16(a=isZX,b=notX,sel = nx,out = finalX);

    Mux16(a=y,b=false,sel = zy,out = isZY);
    Not16(in = isZY, out = notY);
    Mux16(a=isZY,b=notY,sel = ny,out = finalY);


    //构建 f的实现
    Add16(a=finalX,b=finalY,out = addResult);
    And16(a = finalX, b= finalY,out = AndResult);

    Mux16(a = AndResult,b = addResult,sel = f,out = originOut);

    //构建 no的控制位
    Not16(in=originOut,out= Nout);
    
    //输出out
    Mux16(a=originOut,b=Nout,sel = no,out = out,out[0..7]=outlow,out[8..15] = outhigh,out[15]=ng);

    //输出zr
    Or8Way(in = outlow,out = zr1);
    Or8Way(in = outhigh,out = zr2);
    Or(a = zr1,b=zr2,out = notzr);
    Not(in = notzr,out = zr);
**/

   
}